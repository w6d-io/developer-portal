(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("@duik/create-simple-component"));
	else if(typeof define === 'function' && define.amd)
		define(["@duik/create-simple-component"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("@duik/create-simple-component")) : factory(root["@duik/create-simple-component"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE__2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 61);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),

/***/ 1:
/***/ (function(module, exports) {

module.exports = require("classnames");

/***/ }),

/***/ 117:
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin
module.exports = {"datepicker":"datepicker","datepicker-container":"datepicker-container","datepicker-view-container":"datepicker-view-container","datepicker-header":"datepicker-header","datepicker-nav-btn":"datepicker-nav-btn","datepicker-title-btn":"datepicker-title-btn","datepicker-month-list":"datepicker-month-list","datepicker-year-list":"datepicker-year-list","datepicker-month-list-item":"datepicker-month-list-item","datepicker-year-list-item":"datepicker-year-list-item","datepicker-month":"datepicker-month","datepicker-day":"datepicker-day","datepicker-day-name":"datepicker-day-name","datepicker-day-content":"datepicker-day-content","datepicker-day-selected-last":"datepicker-day-selected-last","datepicker-day-selected-first":"datepicker-day-selected-first","datepicker-day-current-month":"datepicker-day-current-month","datepicker-day-not-current":"datepicker-day-not-current","datepicker-day-selected":"datepicker-day-selected","datepicker-day-hover-range":"datepicker-day-hover-range"};

/***/ }),

/***/ 13:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return useDatepickerValue; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

var getValue = function (value, isRange) {
    if (!!isRange && !value) {
        return { from: undefined, to: undefined };
    }
    return value;
};
var useDatepickerValue = function (controlledValue, isRange, onDateChange) {
    var defaultValue = getValue(controlledValue, isRange);
    var _a = react__WEBPACK_IMPORTED_MODULE_0___default.a.useState(defaultValue), innerValue = _a[0], setInnerValue = _a[1];
    var value = typeof controlledValue === "undefined" ? innerValue : controlledValue;
    var setValue = function (value) {
        setInnerValue(value);
        if (onDateChange) {
            onDateChange(value);
        }
    };
    return {
        value: value,
        setValue: setValue
    };
};


/***/ }),

/***/ 15:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DatepickerContainer; });
/* harmony import */ var _duik_create_simple_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _duik_create_simple_component__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_duik_create_simple_component__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _styles_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(117);
/* harmony import */ var _styles_scss__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_styles_scss__WEBPACK_IMPORTED_MODULE_1__);


var DatepickerContainer = _duik_create_simple_component__WEBPACK_IMPORTED_MODULE_0___default()({
    displayName: "DatepickerContainer",
    className: _styles_scss__WEBPACK_IMPORTED_MODULE_1___default.a["datepicker-container"],
    Component: "div"
});
/* unused harmony default export */ var _unused_webpack_default_export = (DatepickerContainer);


/***/ }),

/***/ 16:
/***/ (function(module, exports) {



/***/ }),

/***/ 2:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__2__;

/***/ }),

/***/ 49:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ Datepicker; });

// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(0);
var external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);

// EXTERNAL MODULE: external "classnames"
var external_classnames_ = __webpack_require__(1);
var external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);

// EXTERNAL MODULE: ./packages/Datepicker/styles.scss
var styles = __webpack_require__(117);
var styles_default = /*#__PURE__*/__webpack_require__.n(styles);

// CONCATENATED MODULE: ./packages/Datepicker/utils.ts
var getDaysInMonth = function (date) {
    var d = new Date(date);
    d.setMonth(date.getMonth() + 1);
    d.setDate(0);
    return d.getDate();
};
/**
 * 0 - 6
 * @param date
 */
var getMonthStartDay = function (date) {
    var d = new Date(date);
    d.setDate(1);
    return d.getDay() - 1; // monday is 0
};
var generateArrayOfLen = function (len, startNumber) {
    if (startNumber === void 0) { startNumber = 1; }
    var index = 0;
    var arr = [];
    while (index < len) {
        arr.push(index + startNumber);
        index += 1;
    }
    return arr;
};
var isDateSelected = function (date, selectedDateFrom, selectedDateTo, selectedDate) {
    if (!date) {
        return false;
    }
    if (selectedDate && selectedDate.getTime() === date.getTime()) {
        return true;
    }
    if (selectedDateFrom &&
        selectedDateTo &&
        selectedDateFrom.getTime() <= date.getTime() &&
        selectedDateTo.getTime() >= date.getTime()) {
        return true;
    }
    return false;
};
var isDateInRange = function (date, from, to) {
    if (!date || !from || !to) {
        return false;
    }
    if (to.getTime() >= date.getTime() && date.getTime() >= from.getTime()) {
        return true;
    }
    return false;
};
var isDateSelectedFirst = function (date, selectedDateFrom, selectedDate) {
    if (!date) {
        return false;
    }
    if (selectedDate && selectedDate.getTime() === date.getTime()) {
        return true;
    }
    if (selectedDateFrom && selectedDateFrom.getTime() === date.getTime()) {
        return true;
    }
    return false;
};
var isDateSelectedLast = function (date, selectedDateFrom, selectedDateTo, selectedDate) {
    if (!date) {
        return false;
    }
    if (selectedDate && selectedDate.getTime() === date.getTime()) {
        return true;
    }
    if (selectedDateTo && selectedDateTo.getTime() === date.getTime()) {
        return true;
    }
    if (selectedDateFrom &&
        selectedDateFrom.getTime() === date.getTime() &&
        !selectedDateTo) {
        return true;
    }
    return false;
};
var isDayDisabled = function (date, minDate, maxDate) {
    if (!maxDate && !minDate) {
        return false;
    }
    if (maxDate && maxDate.getTime() < date.getTime()) {
        return true;
    }
    if (minDate && minDate.getTime() > date.getTime()) {
        return true;
    }
    return false;
};
var isMonthDisabled = function (date, minDate, maxDate) {
    if (!maxDate && !minDate) {
        return false;
    }
    var year = date.getFullYear();
    var month = date.getMonth();
    if (maxDate) {
        var maxDateYear = maxDate.getFullYear();
        var maxDateMonth = maxDate.getMonth();
        if (maxDateYear < year || (maxDateYear === year && maxDateMonth < month)) {
            return true;
        }
    }
    if (minDate) {
        var minDateYear = minDate.getFullYear();
        var minDateMonth = minDate.getMonth();
        if (minDateYear > year || (minDateYear === year && minDateMonth > month)) {
            return true;
        }
    }
    return false;
};
var isYearDisabled = function (date, minDate, maxDate) {
    if (!maxDate && !minDate) {
        return false;
    }
    var year = date.getFullYear();
    if (maxDate) {
        var maxDateYear = maxDate.getFullYear();
        if (maxDateYear < year) {
            return true;
        }
    }
    if (minDate) {
        var minDateYear = minDate.getFullYear();
        if (minDateYear > year) {
            return true;
        }
    }
    return false;
};

// CONCATENATED MODULE: ./packages/Datepicker/MonthView.tsx
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (undefined && undefined.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};




var DatepickerDay = function (props) {
    var _a;
    var date = props.date, isCurrentMonth = props.isCurrentMonth, handleDateSelect = props.handleDateSelect, selectedDateFrom = props.selectedDateFrom, selectedDateTo = props.selectedDateTo, selectedDate = props.selectedDate, minDate = props.minDate, maxDate = props.maxDate, handleMouseOver = props.handleMouseOver, mouseOverDate = props.mouseOverDate, rest = __rest(props, ["date", "isCurrentMonth", "handleDateSelect", "selectedDateFrom", "selectedDateTo", "selectedDate", "minDate", "maxDate", "handleMouseOver", "mouseOverDate"]);
    var handleClick = function () {
        if (handleDateSelect) {
            handleDateSelect(date);
        }
    };
    var handleOnMouseOver = handleMouseOver
        ? function () {
            handleMouseOver(date);
        }
        : undefined;
    return (external_react_default.a.createElement("button", __assign({ type: "button", onClick: handleClick, key: date.toDateString(), disabled: isDayDisabled(date, minDate, maxDate), onMouseOver: handleOnMouseOver, className: external_classnames_default()(styles_default.a['datepicker-day'], (_a = {},
            _a[styles_default.a['datepicker-day-current-month']] = isCurrentMonth,
            _a[styles_default.a['datepicker-day-not-current']] = !isCurrentMonth,
            _a[styles_default.a['datepicker-day-hover-range']] = isDateInRange(date, selectedDateFrom, mouseOverDate),
            _a[styles_default.a['datepicker-day-selected']] = isDateInRange(date, selectedDateFrom, selectedDateTo),
            _a[styles_default.a['datepicker-day-selected-first']] = isDateSelectedFirst(date, selectedDateFrom, selectedDate),
            _a[styles_default.a['datepicker-day-selected-last']] = isDateSelectedLast(date, selectedDateFrom, selectedDateTo, selectedDate),
            _a)) }, rest),
        external_react_default.a.createElement("span", { className: styles_default.a['datepicker-day-content'] }, date.getDate())));
};
var MonthView = function (props) {
    var visibleDate = props.visibleDate, _a = props.weekdayOffset, weekdayOffset = _a === void 0 ? 0 : _a, dayProps = props.dayProps, renderWeekdayShort = props.renderWeekdayShort;
    var startDay = getMonthStartDay(visibleDate);
    var currentYear = visibleDate.getFullYear();
    var currentMonth = visibleDate.getMonth();
    var currentDate = new Date(currentYear, currentMonth, 1);
    var currentMonthDays = getDaysInMonth(currentDate);
    var previousDate = new Date(currentYear, currentMonth - 1, 1);
    var previousMonth = previousDate.getMonth();
    var previousYear = previousDate.getFullYear();
    var previousMonthDays = getDaysInMonth(previousDate);
    var nextDate = new Date(currentYear, currentMonth + 1, 1);
    var nextMonth = nextDate.getMonth();
    var nextYear = nextDate.getFullYear();
    var lengthOfPreviousMonth = (startDay + weekdayOffset) % 7;
    return (external_react_default.a.createElement("div", { className: styles_default.a['datepicker-month'] },
        generateArrayOfLen(7, 7 - weekdayOffset)
            .map(function (v) { return v % 7; })
            .map(function (weekday) { return (external_react_default.a.createElement("span", { key: "head-" + weekday, className: styles_default.a['datepicker-day-name'] }, renderWeekdayShort(weekday))); }),
        generateArrayOfLen(lengthOfPreviousMonth, previousMonthDays - startDay + 1 - weekdayOffset).map(function (item) { return (external_react_default.a.createElement(DatepickerDay, __assign({ key: item, disabled: true, date: new Date(previousYear, previousMonth, item) }, dayProps))); }),
        generateArrayOfLen(currentMonthDays).map(function (item) {
            return (external_react_default.a.createElement(DatepickerDay, __assign({ key: "current-" + item, isCurrentMonth: true, date: new Date(currentYear, currentMonth, item) }, dayProps)));
        }),
        generateArrayOfLen((7 - ((lengthOfPreviousMonth + currentMonthDays) % 7)) % 7, 1).map(function (item) { return (external_react_default.a.createElement(DatepickerDay, __assign({ key: item, date: new Date(nextYear, nextMonth, item) }, dayProps))); })));
};
MonthView.displayName = 'MonthView';

// CONCATENATED MODULE: ./packages/Datepicker/MonthListView.tsx



var MonthListView = function (props) {
    var handleMonthSelect = props.handleMonthSelect, renderMonthName = props.renderMonthName, minDate = props.minDate, maxDate = props.maxDate, visibleDate = props.visibleDate;
    var visibleYear = visibleDate.getFullYear();
    return (external_react_default.a.createElement("div", { className: styles_default.a['datepicker-month-list'] }, generateArrayOfLen(12, 0).map(function (monthNumber) {
        var onClickMonth = function () {
            handleMonthSelect(monthNumber);
        };
        return (external_react_default.a.createElement("button", { type: "button", key: monthNumber, onClick: onClickMonth, className: styles_default.a['datepicker-month-list-item'], disabled: isMonthDisabled(new Date(visibleYear, monthNumber, 1), minDate, maxDate) }, renderMonthName(monthNumber)));
    })));
};
MonthListView.displayName = 'MonthListView';

// CONCATENATED MODULE: ./packages/Datepicker/YearListView.tsx



var YearListView = function (props) {
    var visibleDate = props.visibleDate, handleYearSelect = props.handleYearSelect, minDate = props.minDate, maxDate = props.maxDate;
    var currentYear = visibleDate.getFullYear();
    var startYear = currentYear - (currentYear % 12);
    return (external_react_default.a.createElement("div", { className: styles_default.a['datepicker-year-list'] }, generateArrayOfLen(12, startYear).map(function (yearNumber) {
        var onClickMonth = function () {
            handleYearSelect(yearNumber);
        };
        return (external_react_default.a.createElement("button", { type: "button", key: yearNumber, onClick: onClickMonth, className: styles_default.a['datepicker-year-list-item'], disabled: isYearDisabled(new Date(yearNumber, 1, 1), minDate, maxDate) }, yearNumber));
    })));
};
YearListView.displayName = 'YearListView';

// CONCATENATED MODULE: ./packages/Datepicker/useDatepickerView.ts

var DatepickerView;
(function (DatepickerView) {
    DatepickerView["month"] = "MONTH";
    DatepickerView["monthList"] = "MONTH_LIST";
    DatepickerView["yearList"] = "YEAR_LIST";
})(DatepickerView || (DatepickerView = {}));
var useDatepickerView = function (initialView) {
    if (initialView === void 0) { initialView = DatepickerView.month; }
    var _a = external_react_default.a.useState(initialView), activeView = _a[0], setView = _a[1];
    var setNextView = function () {
        if (activeView === DatepickerView.yearList) {
            setView(DatepickerView.monthList);
        }
        else if (activeView === DatepickerView.monthList) {
            setView(DatepickerView.month);
        }
    };
    var setPrevView = function () {
        if (activeView === DatepickerView.monthList) {
            setView(DatepickerView.yearList);
        }
        else if (activeView === DatepickerView.month) {
            setView(DatepickerView.monthList);
        }
    };
    return {
        activeView: activeView,
        setNextView: setNextView,
        setPrevView: setPrevView,
        setView: setView
    };
};

// CONCATENATED MODULE: ./packages/Datepicker/defaultRenders.tsx

var months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
];
var getMonthText = function (date) {
    var monthNumber = date.getMonth();
    return months[monthNumber];
};
var getMonthTextByMonthNumber = function (monthNumber) {
    return months[monthNumber];
};
var weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
var defaultRenderTitle = function (visibleDate, activeView) {
    switch (activeView) {
        case DatepickerView.month:
            return getMonthText(visibleDate) + " " + visibleDate.getFullYear();
        case DatepickerView.monthList:
            return visibleDate.getFullYear();
        default:
            return "Select Year";
    }
};
var defaultRenderMonthName = function (monthNumber) {
    return getMonthTextByMonthNumber(monthNumber);
};
var defaultRenderWeekdayShort = function (weekdayNumber) {
    return weekdaysShort[weekdayNumber];
};

// CONCATENATED MODULE: ./packages/Datepicker/useVisibleDate.ts


var useVisibleDate = function (initDate, view) {
    if (initDate === void 0) { initDate = new Date(); }
    var _a = external_react_default.a.useState(initDate), visibleDate = _a[0], setVisibleDate = _a[1];
    var handleMonthSelect = function (monthNumber) {
        var nextVisibleDate = new Date(visibleDate);
        nextVisibleDate.setMonth(monthNumber);
        setVisibleDate(nextVisibleDate);
        view.setNextView();
    };
    var handleYearSelect = function (yearNumber) {
        var nextVisibleDate = new Date(visibleDate);
        nextVisibleDate.setFullYear(yearNumber);
        setVisibleDate(nextVisibleDate);
        view.setNextView();
    };
    var handlePrev = function () {
        if (view.activeView === DatepickerView.month) {
            var nextVisibleDate = new Date(visibleDate);
            nextVisibleDate.setMonth(visibleDate.getMonth() - 1);
            setVisibleDate(nextVisibleDate);
        }
        if (view.activeView === DatepickerView.monthList) {
            var nextVisibleDate = new Date(visibleDate);
            nextVisibleDate.setFullYear(visibleDate.getFullYear() - 1);
            setVisibleDate(nextVisibleDate);
        }
        if (view.activeView === DatepickerView.yearList) {
            var nextVisibleDate = new Date(visibleDate);
            nextVisibleDate.setFullYear(visibleDate.getFullYear() - 12);
            setVisibleDate(nextVisibleDate);
        }
    };
    var handleNext = function () {
        if (view.activeView === DatepickerView.month) {
            var nextVisibleDate = new Date(visibleDate);
            nextVisibleDate.setMonth(visibleDate.getMonth() + 1);
            setVisibleDate(nextVisibleDate);
        }
        if (view.activeView === DatepickerView.monthList) {
            var nextVisibleDate = new Date(visibleDate);
            nextVisibleDate.setFullYear(visibleDate.getFullYear() + 1);
            setVisibleDate(nextVisibleDate);
        }
        if (view.activeView === DatepickerView.yearList) {
            var nextVisibleDate = new Date(visibleDate);
            nextVisibleDate.setFullYear(visibleDate.getFullYear() + 12);
            setVisibleDate(nextVisibleDate);
        }
    };
    return {
        handleMonthSelect: handleMonthSelect,
        handleYearSelect: handleYearSelect,
        handlePrev: handlePrev,
        handleNext: handleNext,
        visibleDate: visibleDate,
        setVisibleDate: setVisibleDate
    };
};

// EXTERNAL MODULE: ./packages/Datepicker/useDatepickerValue.ts
var useDatepickerValue = __webpack_require__(13);

// CONCATENATED MODULE: ./packages/Datepicker/Datepicker.tsx









var getInitVisibleDate = function (initDate, isRange, value) {
    if (initDate) {
        return initDate;
    }
    if (isRange && !!value && !!value.from) {
        return value.from;
    }
    if (!isRange && !!value) {
        return value;
    }
    return new Date();
};
var Datepicker = function (props) {
    var view = useDatepickerView();
    var _a = external_react_default.a.useState(null), mouseOverDate = _a[0], setMouseOverDate = _a[1];
    var _b = props.renderTitle, renderTitle = _b === void 0 ? defaultRenderTitle : _b, _c = props.renderMonthName, renderMonthName = _c === void 0 ? defaultRenderMonthName : _c, _d = props.renderWeekdayShort, renderWeekdayShort = _d === void 0 ? defaultRenderWeekdayShort : _d, onChangeProp = props.onDateChange, controlledValue = props.value, isRange = props.isRange, minDate = props.minDate, maxDate = props.maxDate, weekdayOffset = props.weekdayOffset, initialVisibleDate = props.initialVisibleDate;
    var _e = Object(useDatepickerValue["a" /* useDatepickerValue */])(controlledValue, isRange, onChangeProp), value = _e.value, setValue = _e.setValue;
    var initVisibleDate = getInitVisibleDate(initialVisibleDate, isRange, value);
    var _f = useVisibleDate(initVisibleDate, view), handleMonthSelect = _f.handleMonthSelect, handleYearSelect = _f.handleYearSelect, handleNext = _f.handleNext, handlePrev = _f.handlePrev, visibleDate = _f.visibleDate;
    var handleDateSelect = external_react_default.a.useCallback(function (date) {
        if (isRange === true) {
            var _a = value, from_1 = _a.from, to_1 = _a.to;
            var onChangeValue = setValue;
            if (from_1 && !to_1 && from_1.getTime() <= date.getTime()) {
                onChangeValue({ from: from_1, to: date });
            }
            else {
                setMouseOverDate(null);
                onChangeValue({ from: date, to: null });
            }
        }
        else {
            var onChangeValue = setValue;
            onChangeValue(date);
        }
    }, [value]);
    var dateValue = !value
        ? (isRange && { from: null, to: null }) || null
        : value;
    var from = !isRange
        ? dateValue
        : dateValue.from;
    var to = !isRange
        ? dateValue
        : dateValue.to;
    var handleMouseOver = from && isRange && !to
        ? function (date) {
            setMouseOverDate(date);
        }
        : undefined;
    var onMouseLeave = from && isRange && !to
        ? function () {
            setMouseOverDate(undefined);
        }
        : undefined;
    var dayProps = {
        handleDateSelect: handleDateSelect,
        selectedDateFrom: from,
        selectedDateTo: to,
        minDate: minDate,
        maxDate: maxDate,
        handleMouseOver: handleMouseOver,
        onMouseLeave: onMouseLeave,
        mouseOverDate: mouseOverDate
    };
    return (external_react_default.a.createElement("div", { className: styles_default.a["datepicker"] },
        external_react_default.a.createElement("div", { className: styles_default.a["datepicker-header"] },
            external_react_default.a.createElement("button", { onClick: handlePrev, className: styles_default.a["datepicker-nav-btn"] }, "\u2190"),
            external_react_default.a.createElement("button", { className: styles_default.a["datepicker-title-btn"], type: "button", onClick: view.setPrevView }, renderTitle(visibleDate, view.activeView)),
            external_react_default.a.createElement("button", { onClick: handleNext, className: styles_default.a["datepicker-nav-btn"] }, "\u2192")),
        external_react_default.a.createElement("div", { className: styles_default.a["datepicker-view-container"] },
            view.activeView === DatepickerView.yearList && (external_react_default.a.createElement(YearListView, { handleYearSelect: handleYearSelect, visibleDate: visibleDate, minDate: minDate, maxDate: maxDate })),
            view.activeView === DatepickerView.monthList && (external_react_default.a.createElement(MonthListView, { handleMonthSelect: handleMonthSelect, visibleDate: visibleDate, renderMonthName: renderMonthName, minDate: minDate, maxDate: maxDate })),
            view.activeView === DatepickerView.month && (external_react_default.a.createElement(MonthView, { dayProps: dayProps, renderWeekdayShort: renderWeekdayShort, visibleDate: visibleDate, weekdayOffset: weekdayOffset })))));
};
Datepicker.displayName = "Datepicker";


/***/ }),

/***/ 61:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Datepicker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(49);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Datepicker", function() { return _Datepicker__WEBPACK_IMPORTED_MODULE_0__["a"]; });

/* harmony import */ var _DatepickerContainer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DatepickerContainer", function() { return _DatepickerContainer__WEBPACK_IMPORTED_MODULE_1__["a"]; });

/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _types__WEBPACK_IMPORTED_MODULE_2__) if(["Datepicker","DatepickerContainer","default","default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _types__WEBPACK_IMPORTED_MODULE_2__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _useDatepickerValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(13);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "useDatepickerValue", function() { return _useDatepickerValue__WEBPACK_IMPORTED_MODULE_3__["a"]; });







/***/ })

/******/ });
});