{"pageProps":{"frontmatter":{"title":"A quick introduction to CI/CD.","date":"July 29 2021","reading_time":"5 min read","post_logo":"https://media-exp1.licdn.com/dms/image/C4D0BAQHca9scvFTn_g/company-logo_200_200/0/1575039115252?e=2159024400&v=beta&t=lhQfV9RKT_iydx97uugwZtvsL_zgPoTU_fxFC11nkaI","preview":"CI/CD is one of the pillars of modern cloud native software development. It improves your software products and makes its development more effective and cheaper This article discusses CI/CD and the different tools you can use to implement it.","category":"Advanced Techniques","app":"CI/CD","type":"pipeline"},"slug":"a-quick-introduction-to-cicd","content":"\nCI/CD is one of the pillars of modern cloud native software development. It improves your software products and makes its development more effective and cheaper This article discusses CI/CD and the different tools you can use to implement it.\n\n---\n\nThe process of software development and deployment has been more efficient by the rise in automated development workflows. This efficiency translates into a better user experience, lower cost of development, and higher-level quality. \n\nIterative software development and testing are some of the ingredients of such success. Facebook, for example, releases 100 million lines of code daily. In order to achieve this, creating an effective CI/CD pipeline that doesn't require a manual overhead to deliver commits and hotfixes, is required. \n\nIn this article, we’ll discuss what CI/CD is and the role it plays in DevOps.\n\n### What is CI/CD?\n\nCI/CD stands for continuous integration, continuous delivery, or continuous deployment. Let’s define the scope covered by each of them.\n\n- **Continuous integration**: This covers the development, the integration of parts handled by each developer, and the build of packages and dependencies. Tools such as Version Control Systems (Git) are involved in this step. Depending on the technology you use, you'll be required to use a build tool such as NPM for Javascript. This operation is typically pulling code from the VCS to build it after running unit tests. This is followed by other integration testing depending on your use cases and the applications you are building.\n- **Continuous delivery**: Now that building and testing are automated, we need to have software releases. Releases are what should be deployed to testing, staging, and production servers. Each change (or significant change batches) in your software code should reflect a new release. This process should be also automated and free of any manual overhead. At this level, we evolve the release management techniques to perform planning, scheduling, controlling, and testing builds through different stages and environments. In other words, continuous delivery aims to have ready-to-deploy artifacts on code changes, automatically and continuously.\n- **Continuous deployment**. This is where application releases are deployed on the target environment. Continuous deployment is nothing more than an extension to continuous delivery: It intends to automate deployments based on the steps already done during the continuous delivery process. You can consider the continuous delivery outputs as the continuous deployment input. Some organizations limit automating deployments to testing and staging environments while keeping manual deployments for production and sensitive environments.\n\n### What is a CI/CD pipeline?\n\nA CI/CD pipeline is a series of automated steps that takes software from development to deployment. It increases software delivery by introducing automation in integration, testing, delivery, and deployment. The number of stages that a pipeline has is dependent on the types of tests and reviews that are required. A typical pipeline is composed of three (or four) main stages: build, test, release and deploy. A CI/D pipeline is simply the set of steps involved in your CI/CD implementation.\n\n## Incorporating CI/CD into your organization's development process\n\nIntroducing CI/CD to a team will certainly increase the frequency at which new versions are built, tested, and deployed. However, your team will need to clearly understand what role they are playing to ensure the continuity of the whole process. Failure to do this can lead to flaws in versioning, integration, security vulnerabilities, and other non-technical plights like the lack of motivation and nurturing a culture of blame.\n\nWhen well implemented, CI/CD promises increased software development velocity and shorter time-to-market products. That is why determining the right processes, tools and personal are one of the most significant resolutions you’ll make while embracing this approach. First and foremost, DevOps and its successful implementation rely on the 3 pillars: People, Processes, and Tools.\n\nOne of the most straightforward, easiest, and quickest ways to introduce your team to CI/CD is using low or no-code CI/CD services, instead of mounting your pipeline manually using multiple tools. You'll need to create your CI infrastructure, maintain your build tools, implement testing tools like security scanners, artifacts, and its storage infrastructure as well as other tools.\n\nUsing software as a service as your CI/CD tool will reduce the time to incorporate it into your organization while giving your team more time to focus on product development instead of focusing on building and maintaining pipelines and infrastructure.\n\nAnother solution is hiring DevOps specialists or training your developers to create and maintain your continuous integration and continuous delivery pipelines. This alternative requires an investment of time and money while using a no-code tool can be 200x cheaper and 20x faster to implement.\n\n## What are some CI/CD tools?\n\nThe success of your CI/CD journey is largely dependent on the tools used to implement it. Below are some of the tools that you can use.\n\n### Wildcard\n\nWildcard (w6d) is a no-code, all-in-one, hassle-free platform that makes the deployment of cloud native apps smooth. It ranks higher above its peers because it is secure, easy to use, and has no hidden costs. Some of its features include:\n\n- Polyglotism: By supporting NodeJS, Python, Javascript Framework (React, Angular, VueJS), Golang, Dotnet, and Rust apps, you can build polyglot apps, test and release them with a tiny or no effort.\n- Kubernetes native: Wildcard was built for Kubernetes. It has plug-and-play Kubernetes features that allow developers to deploy their containerized apps to a cluster. The latter can be managed by Wildcard or an on-premises cluster managed by your team.\n- AI-based, ready-to-use CI/CD templates: This powerful feature allows you to create CI/CD pipelines in minutes.\n- This platform is reliable for both minor and major updates.\n\nTry it [here](https://www.w6d.io/) for free!\n\n### Screwdriver\n\nThis is an open-source intuitive build platform that supports continuous delivery. The goal of this tool is to boost teams’ productivity by supporting them throughout the development process. \n\n- Screwdriver supports integration with Github, Docker, Bitbucket, Postgres, and MySQL\n- It is extensible through a  plugin system\n- It gives control over your Kubernetes clusters\n\n### Jenkins\n\nThis is an open-source Java-based CI/CD tool. It supports the building and deployment of software and also allows for the automation of the whole process. Some of its features include:\n\n- It has many plugins to support the build and deployment process\n- It has scheduling features\n- It is easy to install and use\n\nThis tool is best when you have complex software with major updates to be made by a team of developers.\n\n### GoCD\n\nGoCD, another open-source end-to-end workflow visualization tool. It helps users visualize the entire development process in a single view. Below are some of the GoCD features:\n\n- It integrates with other external tools via extensible plugins\n- It streamlines CD workflow on popular cloud environments such as Kubernetes and AWS.\n- It supports modeling complex CD workflows\n\n## Summary\n\nIn sum, the industrialization of the development workflows increases the efficiency and quality of applications significantly. The CI/CD pipeline has three main stages that include the build stage, test stage, and delivery/deployment stage. Creating efficient pipelines makes the whole process flow seamlessly, thereby increasing the teams’ productivity.\n\n## Build your first CI/CD pipeline with no code in simple clicks!\n\nTry [WildCard](http://w6d.io/) platform, a hassle-free CI/CD pipeline solution that will help you transform how you deliver your cloud-native applications. Start creating your CI/CD pipeline in minutes for free.","posts":[{"slug":"a-quick-introduction-to-cicd","frontmatter":{"title":"A quick introduction to CI/CD.","date":"July 29 2021","reading_time":"5 min read","post_logo":"https://media-exp1.licdn.com/dms/image/C4D0BAQHca9scvFTn_g/company-logo_200_200/0/1575039115252?e=2159024400&v=beta&t=lhQfV9RKT_iydx97uugwZtvsL_zgPoTU_fxFC11nkaI","preview":"CI/CD is one of the pillars of modern cloud native software development. It improves your software products and makes its development more effective and cheaper This article discusses CI/CD and the different tools you can use to implement it.","category":"Advanced Techniques","app":"CI/CD","type":"pipeline"}},{"slug":"canary-release-vs-blue-green-deployments","frontmatter":{"title":"Canary Release vs Blue-Green Deployments.","date":"July 30 2021","reading_time":"3 min read","post_logo":"https://media-exp1.licdn.com/dms/image/C4D0BAQHca9scvFTn_g/company-logo_200_200/0/1575039115252?e=2159024400&v=beta&t=lhQfV9RKT_iydx97uugwZtvsL_zgPoTU_fxFC11nkaI","preview":"Choosing the right deployment strategy is crucial to the availability and quality of your services.  Two of the most known deployment strategies are blue/green deployment and canary release. This article discusses both deployment strategies. It explores the differences between the two, the pros and cons of each one, and finally the best use case for each of them.","category":"Advanced Techniques","app":"CI/CD","type":"pipeline"}},{"slug":"wildcard-officially-becomes-owner-and-collaborator-of-babelfish","frontmatter":{"title":"Wildcard officially becomes owner and collaborator of Babelfish","date":"April 9 2021","reading_time":"2 min read","post_logo":"https://images-platform.99static.com/ZVAAzy__FeP9nrM-42Sbj75AjpI=/0x0:1001x1001/500x500/top/smart/99designs-contests-attachments/84/84527/attachment_84527709","preview":"Babelfish is a self-hosted server for source-code parsing: it has the power to parse all kinds of file, in any supported language, extracting an Abstract Syntax Tree and converting it into a Universal Abstract Syntax Tree (UAST). This UAST enables further analysis and transformations with either the included tools or your own tools by providing a standard open format.","category":"Advanced Techniques","app":"Babelfish","type":"server"}}]},"__N_SSG":true}